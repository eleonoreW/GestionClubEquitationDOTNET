// <auto-generated />
using System;
using ClubEquitation.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace ClubEquitation.Migrations
{
    [DbContext(typeof(ClubEquitationContext))]
    partial class ClubEquitationContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.8-servicing-32085")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);
            
            modelBuilder.Entity("ClubEquitation.Models.Activite", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Capacite");

                    b.Property<string>("Commentaire");

                    b.Property<DateTime>("Date");

                    b.Property<string>("Details");

                    b.Property<int>("Duree");

                    b.Property<bool>("EstActive");

                    b.Property<int>("LieuId");

                    b.Property<string>("Nom");

                    b.Property<string>("ProfesseurId");

                    b.Property<string>("SearchString");

                    b.Property<int>("TypeId");

                    b.HasKey("Id");

                    b.HasIndex("LieuId");

                    b.HasIndex("ProfesseurId");

                    b.HasIndex("TypeId");

                    b.ToTable("Activite");
                });

            modelBuilder.Entity("ClubEquitation.Models.Cheval", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Commentaire");

                    b.Property<DateTime>("DateNaissance");

                    b.Property<string>("Descriptif");

                    b.Property<int>("NbHeureMaxSemaine");

                    b.Property<string>("Nom");

                    b.Property<string>("ProprietaireId");

                    b.Property<int>("RaceId");

                    b.Property<string>("SearchString");

                    b.Property<int>("Taille");

                    b.HasKey("Id");

                    b.HasIndex("ProprietaireId");

                    b.HasIndex("RaceId");

                    b.ToTable("Cheval");
                });

            modelBuilder.Entity("ClubEquitation.Models.ChevalActivite", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ActiviteId");

                    b.Property<int>("ChevalId");

                    b.HasKey("Id");

                    b.HasIndex("ActiviteId");

                    b.HasIndex("ChevalId");

                    b.ToTable("ChevalActivite");
                });

            modelBuilder.Entity("ClubEquitation.Models.Lieu", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Capacite");

                    b.Property<string>("Descriptif");

                    b.Property<string>("Nom");

                    b.HasKey("Id");

                    b.ToTable("Lieu");
                });

            modelBuilder.Entity("ClubEquitation.Models.Race", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Nom");

                    b.HasKey("Id");

                    b.ToTable("Race");
                });

            modelBuilder.Entity("ClubEquitation.Models.Reservation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ActiviteId");

                    b.Property<DateTime>("Date");

                    b.Property<bool>("EstActive");

                    b.Property<int>("NbPersonne");

                    b.Property<string>("SearchString");

                    b.Property<string>("UtilisateurId");

                    b.HasKey("Id");

                    b.HasIndex("ActiviteId");

                    b.HasIndex("UtilisateurId");

                    b.ToTable("Reservation");
                });

            modelBuilder.Entity("ClubEquitation.Models.Type", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Descriptif");

                    b.Property<string>("Nom");

                    b.HasKey("Id");

                    b.ToTable("Type");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasMaxLength(128);

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("ClubEquitation.Models.Activite", b =>
                {
                    b.HasOne("ClubEquitation.Models.Lieu", "Lieu")
                        .WithMany("Activite")
                        .HasForeignKey("LieuId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ClubEquitation.Areas.Identity.Data.ClubEquitationUser", "Professeur")
                        .WithMany("Activite")
                        .HasForeignKey("ProfesseurId");

                    b.HasOne("ClubEquitation.Models.Type", "Type")
                        .WithMany("Activite")
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ClubEquitation.Models.Cheval", b =>
                {
                    b.HasOne("ClubEquitation.Areas.Identity.Data.ClubEquitationUser", "Proprietaire")
                        .WithMany("Cheval")
                        .HasForeignKey("ProprietaireId");

                    b.HasOne("ClubEquitation.Models.Race", "Race")
                        .WithMany("Cheval")
                        .HasForeignKey("RaceId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ClubEquitation.Models.ChevalActivite", b =>
                {
                    b.HasOne("ClubEquitation.Models.Activite", "Activite")
                        .WithMany("ChevalActivite")
                        .HasForeignKey("ActiviteId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ClubEquitation.Models.Cheval", "Cheval")
                        .WithMany("ChevalActivite")
                        .HasForeignKey("ChevalId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ClubEquitation.Models.Reservation", b =>
                {
                    b.HasOne("ClubEquitation.Models.Activite", "Activite")
                        .WithMany("Reservation")
                        .HasForeignKey("ActiviteId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ClubEquitation.Areas.Identity.Data.ClubEquitationUser", "Utilisateur")
                        .WithMany("Reservation")
                        .HasForeignKey("UtilisateurId");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("ClubEquitation.Areas.Identity.Data.ClubEquitationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("ClubEquitation.Areas.Identity.Data.ClubEquitationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ClubEquitation.Areas.Identity.Data.ClubEquitationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("ClubEquitation.Areas.Identity.Data.ClubEquitationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
