// <auto-generated />
using System;
using ClubEquitation.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace ClubEquitation.Migrations.BDClubEquitation
{
    [DbContext(typeof(BDClubEquitationContext))]
    [Migration("20190416180618_mymig1")]
    partial class mymig1
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.8-servicing-32085")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("ClubEquitation.Areas.Identity.Data.ClubEquitationUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("Nom");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("Prenom");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("ClubEquitation.Models.Activite", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Capacite");

                    b.Property<string>("Commentaire")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<DateTime>("Date")
                        .HasColumnType("date");

                    b.Property<string>("Details")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<int>("Duree");

                    b.Property<bool>("EstActive");

                    b.Property<int>("LieuId")
                        .HasColumnName("LieuID");

                    b.Property<string>("Nom")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("ProfesseurId")
                        .HasColumnName("ProfesseurID");

                    b.Property<string>("SearchString")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("('')")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<int>("TypeId")
                        .HasColumnName("TypeID");

                    b.HasKey("Id");

                    b.HasIndex("LieuId");

                    b.HasIndex("ProfesseurId");

                    b.HasIndex("TypeId");

                    b.ToTable("Activite");
                });

            modelBuilder.Entity("ClubEquitation.Models.Cheval", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Commentaire")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<DateTime>("DateNaissance")
                        .HasColumnType("date");

                    b.Property<string>("Descriptif")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<int>("NbHeureMaxSemaine");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("ProprietaireId")
                        .HasColumnName("ProprietaireID");

                    b.Property<int>("RaceId")
                        .HasColumnName("RaceID");

                    b.Property<string>("SearchString")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("('')")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<int>("Taille");

                    b.HasKey("Id");

                    b.HasIndex("Nom")
                        .IsUnique()
                        .HasName("UQ__Cheval__C7D1C61EF6582795");

                    b.HasIndex("ProprietaireId");

                    b.HasIndex("RaceId");

                    b.ToTable("Cheval");
                });

            modelBuilder.Entity("ClubEquitation.Models.ChevalActivite", b =>
                {
                    b.Property<int>("ChevalId")
                        .HasColumnName("ChevalID");

                    b.Property<int>("ActiviteId")
                        .HasColumnName("ActiviteID");

                    b.Property<int>("Id");

                    b.HasKey("ChevalId", "ActiviteId");

                    b.HasIndex("ActiviteId");

                    b.ToTable("Cheval_Activite");
                });

            modelBuilder.Entity("ClubEquitation.Models.Lieu", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Capacite");

                    b.Property<string>("Descriptif")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("Nom")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.HasIndex("Nom")
                        .IsUnique()
                        .HasName("UQ__Lieu__C7D1C61EE3386B39")
                        .HasFilter("[Nom] IS NOT NULL");

                    b.ToTable("Lieu");
                });

            modelBuilder.Entity("ClubEquitation.Models.Race", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Nom")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.HasIndex("Nom")
                        .IsUnique()
                        .HasName("UQ__Race__C7D1C61E5906D50C")
                        .HasFilter("[Nom] IS NOT NULL");

                    b.ToTable("Race");
                });

            modelBuilder.Entity("ClubEquitation.Models.Reservation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ActiviteId")
                        .HasColumnName("ActiviteID");

                    b.Property<DateTime>("Date")
                        .HasColumnType("date");

                    b.Property<bool>("EstActive");

                    b.Property<int>("NbPersonne");

                    b.Property<string>("SearchString")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("('')")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("UtilisateurId")
                        .HasColumnName("UtilisateurID");

                    b.HasKey("Id");

                    b.HasIndex("ActiviteId");

                    b.HasIndex("UtilisateurId");

                    b.ToTable("Reservation");
                });

            modelBuilder.Entity("ClubEquitation.Models.Type", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Descriptif")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("Nom")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.HasIndex("Nom")
                        .IsUnique()
                        .HasName("UQ__Type__C7D1C61E3790728B")
                        .HasFilter("[Nom] IS NOT NULL");

                    b.ToTable("Type");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasMaxLength(128);

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("ClubEquitation.Models.Activite", b =>
                {
                    b.HasOne("ClubEquitation.Models.Lieu", "Lieu")
                        .WithMany("Activite")
                        .HasForeignKey("LieuId")
                        .HasConstraintName("Activite_FK_Lieu");

                    b.HasOne("ClubEquitation.Areas.Identity.Data.ClubEquitationUser", "Professeur")
                        .WithMany("Activite")
                        .HasForeignKey("ProfesseurId")
                        .HasConstraintName("Activite_FK_Professeur");

                    b.HasOne("ClubEquitation.Models.Type", "Type")
                        .WithMany("Activite")
                        .HasForeignKey("TypeId")
                        .HasConstraintName("Activite_FK_Type");
                });

            modelBuilder.Entity("ClubEquitation.Models.Cheval", b =>
                {
                    b.HasOne("ClubEquitation.Areas.Identity.Data.ClubEquitationUser", "Proprietaire")
                        .WithMany("Cheval")
                        .HasForeignKey("ProprietaireId")
                        .HasConstraintName("Cheval_FK_Proprietaire");

                    b.HasOne("ClubEquitation.Models.Race", "Race")
                        .WithMany("Cheval")
                        .HasForeignKey("RaceId")
                        .HasConstraintName("Cheval_FK_Race");
                });

            modelBuilder.Entity("ClubEquitation.Models.ChevalActivite", b =>
                {
                    b.HasOne("ClubEquitation.Models.Activite", "Activite")
                        .WithMany("ChevalActivite")
                        .HasForeignKey("ActiviteId")
                        .HasConstraintName("ChevalActivite_FK_Activite");

                    b.HasOne("ClubEquitation.Models.Cheval", "Cheval")
                        .WithMany("ChevalActivite")
                        .HasForeignKey("ChevalId")
                        .HasConstraintName("ChevalActivite_FK_Cheval");
                });

            modelBuilder.Entity("ClubEquitation.Models.Reservation", b =>
                {
                    b.HasOne("ClubEquitation.Models.Activite", "Activite")
                        .WithMany("Reservation")
                        .HasForeignKey("ActiviteId")
                        .HasConstraintName("Reservation_FK_Activite");

                    b.HasOne("ClubEquitation.Areas.Identity.Data.ClubEquitationUser", "Utilisateur")
                        .WithMany("Reservation")
                        .HasForeignKey("UtilisateurId")
                        .HasConstraintName("Reservation_FK_Utilisateur");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("ClubEquitation.Areas.Identity.Data.ClubEquitationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("ClubEquitation.Areas.Identity.Data.ClubEquitationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ClubEquitation.Areas.Identity.Data.ClubEquitationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("ClubEquitation.Areas.Identity.Data.ClubEquitationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
